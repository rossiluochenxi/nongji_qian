{"remainingRequest":"D:\\taoserver\\platform\\taoyuan_qian\\ruoyi-ui\\node_modules\\babel-loader\\lib\\index.js!D:\\taoserver\\platform\\taoyuan_qian\\ruoyi-ui\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\taoserver\\platform\\taoyuan_qian\\ruoyi-ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\taoserver\\platform\\taoyuan_qian\\ruoyi-ui\\node_modules\\@jiaminghi\\data-view\\lib\\components\\waterLevelPond\\src\\main.vue?vue&type=script&lang=js","dependencies":[{"path":"D:\\taoserver\\platform\\taoyuan_qian\\ruoyi-ui\\node_modules\\@jiaminghi\\data-view\\lib\\components\\waterLevelPond\\src\\main.vue","mtime":1713163063693},{"path":"D:\\taoserver\\platform\\taoyuan_qian\\ruoyi-ui\\babel.config.js","mtime":1710675411407},{"path":"D:\\taoserver\\platform\\taoyuan_qian\\ruoyi-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1710867555791},{"path":"D:\\taoserver\\platform\\taoyuan_qian\\ruoyi-ui\\node_modules\\babel-loader\\lib\\index.js","mtime":1710867556608},{"path":"D:\\taoserver\\platform\\taoyuan_qian\\ruoyi-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1710867555791},{"path":"D:\\taoserver\\platform\\taoyuan_qian\\ruoyi-ui\\node_modules\\vue-loader\\lib\\index.js","mtime":1710867531387}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKdmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKCJEOi90YW9zZXJ2ZXIvcGxhdGZvcm0vdGFveXVhbl9xaWFuL3J1b3lpLXVpL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdC5qcyIpLmRlZmF1bHQ7Ck9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKICB2YWx1ZTogdHJ1ZQp9KTsKZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwOwp2YXIgX3JlZ2VuZXJhdG9yUnVudGltZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoIkQ6L3Rhb3NlcnZlci9wbGF0Zm9ybS90YW95dWFuX3FpYW4vcnVveWktdWkvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvcmVnZW5lcmF0b3JSdW50aW1lLmpzIikpOwp2YXIgX2FzeW5jVG9HZW5lcmF0b3IyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKCJEOi90YW9zZXJ2ZXIvcGxhdGZvcm0vdGFveXVhbl9xaWFuL3J1b3lpLXVpL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2FzeW5jVG9HZW5lcmF0b3IuanMiKSk7CnZhciBfc2xpY2VkVG9BcnJheTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoIkQ6L3Rhb3NlcnZlci9wbGF0Zm9ybS90YW95dWFuX3FpYW4vcnVveWktdWkvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvc2xpY2VkVG9BcnJheS5qcyIpKTsKdmFyIF90b0NvbnN1bWFibGVBcnJheTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoIkQ6L3Rhb3NlcnZlci9wbGF0Zm9ybS90YW95dWFuX3FpYW4vcnVveWktdWkvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvdG9Db25zdW1hYmxlQXJyYXkuanMiKSk7CnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5maWxsLmpzIik7CnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5tYXAuanMiKTsKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNsaWNlLmpzIik7CnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nLmpzIik7CnJlcXVpcmUoImNvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAuZXhlYy5qcyIpOwpyZXF1aXJlKCJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnJlcGxhY2UuanMiKTsKcmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuZm9yLWVhY2guanMiKTsKdmFyIF9pbmRleCA9IHJlcXVpcmUoIi4uLy4uLy4uL3V0aWwvaW5kZXgiKTsKdmFyIF9pbmRleDIgPSByZXF1aXJlKCJAamlhbWluZ2hpL2NoYXJ0cy9saWIvdXRpbC9pbmRleCIpOwp2YXIgX3V0aWwgPSByZXF1aXJlKCJAamlhbWluZ2hpL2MtcmVuZGVyL2xpYi9wbHVnaW4vdXRpbCIpOwp2YXIgX2NSZW5kZXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoIkBqaWFtaW5naGkvYy1yZW5kZXIiKSk7Ci8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCnZhciBfZGVmYXVsdDIgPSBleHBvcnRzLmRlZmF1bHQgPSB7CiAgbmFtZTogJ0R2V2F0ZXJMZXZlbFBvbmQnLAogIHByb3BzOiB7CiAgICBjb25maWc6IE9iamVjdCwKICAgIGRlZmF1bHQ6IGZ1bmN0aW9uIF9kZWZhdWx0KCkgewogICAgICByZXR1cm4ge307CiAgICB9CiAgfSwKICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkgewogICAgdmFyIGlkID0gKDAsIF9pbmRleC51dWlkKSgpOwogICAgcmV0dXJuIHsKICAgICAgZ3JhZGllbnRJZDogIndhdGVyLWxldmVsLXBvbmQtIi5jb25jYXQoaWQpLAogICAgICBkZWZhdWx0Q29uZmlnOiB7CiAgICAgICAgLyoqCiAgICAgICAgICogQGRlc2NyaXB0aW9uIERhdGEKICAgICAgICAgKiBAdHlwZSB7QXJyYXk8TnVtYmVyPn0KICAgICAgICAgKiBAZGVmYXVsdCBkYXRhID0gW10KICAgICAgICAgKiBAZXhhbXBsZSBkYXRhID0gWzYwLCA0MF0KICAgICAgICAgKi8KICAgICAgICBkYXRhOiBbXSwKICAgICAgICAvKioKICAgICAgICAgKiBAZGVzY3JpcHRpb24gU2hhcGUgb2Ygd2FudGVyIGxldmVsIHBvbmQKICAgICAgICAgKiBAdHlwZSB7U3RyaW5nfQogICAgICAgICAqIEBkZWZhdWx0IHNoYXBlID0gJ3JlY3QnCiAgICAgICAgICogQGV4YW1wbGUgc2hhcGUgPSAncmVjdCcgfCAncm91bmRSZWN0JyB8ICdyb3VuZCcKICAgICAgICAgKi8KICAgICAgICBzaGFwZTogJ3JlY3QnLAogICAgICAgIC8qKgogICAgICAgICAqIEBkZXNjcmlwdGlvbiBXYXRlciB3YXZlIG51bWJlcgogICAgICAgICAqIEB0eXBlIHtOdW1iZXJ9CiAgICAgICAgICogQGRlZmF1bHQgd2F2ZU51bSA9IDMKICAgICAgICAgKi8KICAgICAgICB3YXZlTnVtOiAzLAogICAgICAgIC8qKgogICAgICAgICAqIEBkZXNjcmlwdGlvbiBXYXRlciB3YXZlIGhlaWdodCAocHgpCiAgICAgICAgICogQHR5cGUge051bWJlcn0KICAgICAgICAgKiBAZGVmYXVsdCB3YXZlSGVpZ2h0ID0gNDAKICAgICAgICAgKi8KICAgICAgICB3YXZlSGVpZ2h0OiA0MCwKICAgICAgICAvKioKICAgICAgICAgKiBAZGVzY3JpcHRpb24gV2F2ZSBvcGFjaXR5CiAgICAgICAgICogQHR5cGUge051bWJlcn0KICAgICAgICAgKiBAZGVmYXVsdCB3YXZlT3BhY2l0eSA9IDAuNAogICAgICAgICAqLwogICAgICAgIHdhdmVPcGFjaXR5OiAwLjQsCiAgICAgICAgLyoqCiAgICAgICAgICogQGRlc2NyaXB0aW9uIENvbG9ycyAoaGV4fHJnYnxyZ2JhfGNvbG9yIGtleXdvcmRzKQogICAgICAgICAqIEB0eXBlIHtBcnJheTxTdHJpbmc+fQogICAgICAgICAqIEBkZWZhdWx0IGNvbG9ycyA9IFsnIzAwQkFGRicsICcjM0RFN0M5J10KICAgICAgICAgKiBAZXhhbXBsZSBjb2xvcnMgPSBbJyMwMDAnLCAncmdiKDAsIDAsIDApJywgJ3JnYmEoMCwgMCwgMCwgMSknLCAncmVkJ10KICAgICAgICAgKi8KICAgICAgICBjb2xvcnM6IFsnIzNERTdDOScsICcjMDBCQUZGJ10sCiAgICAgICAgLyoqCiAgICAgICAgICogQGRlc2NyaXB0aW9uIEZvcm1hdHRlcgogICAgICAgICAqIEB0eXBlIHtTdHJpbmd9CiAgICAgICAgICogQGRlZmF1bHQgZm9ybWF0dGVyID0gJ3t2YWx1ZX0lJwogICAgICAgICAqLwogICAgICAgIGZvcm1hdHRlcjogJ3t2YWx1ZX0lJwogICAgICB9LAogICAgICBtZXJnZWRDb25maWc6IHt9LAogICAgICByZW5kZXJlcjogbnVsbCwKICAgICAgc3ZnQm9yZGVyR3JhZGllbnQ6IFtdLAogICAgICBkZXRhaWxzOiAnJywKICAgICAgd2F2ZXM6IFtdLAogICAgICBhbmltYXRpb246IGZhbHNlCiAgICB9OwogIH0sCiAgY29tcHV0ZWQ6IHsKICAgIHJhZGl1czogZnVuY3Rpb24gcmFkaXVzKCkgewogICAgICB2YXIgc2hhcGUgPSB0aGlzLm1lcmdlZENvbmZpZy5zaGFwZTsKICAgICAgaWYgKHNoYXBlID09PSAncm91bmQnKSByZXR1cm4gJzUwJSc7CiAgICAgIGlmIChzaGFwZSA9PT0gJ3JlY3QnKSByZXR1cm4gJzAnOwogICAgICBpZiAoc2hhcGUgPT09ICdyb3VuZFJlY3QnKSByZXR1cm4gJzEwcHgnOwogICAgICByZXR1cm4gJzAnOwogICAgfSwKICAgIHNoYXBlOiBmdW5jdGlvbiBzaGFwZSgpIHsKICAgICAgdmFyIHNoYXBlID0gdGhpcy5tZXJnZWRDb25maWcuc2hhcGU7CiAgICAgIGlmICghc2hhcGUpIHJldHVybiAncmVjdCc7CiAgICAgIHJldHVybiBzaGFwZTsKICAgIH0KICB9LAogIHdhdGNoOiB7CiAgICBjb25maWc6IGZ1bmN0aW9uIGNvbmZpZygpIHsKICAgICAgdmFyIGNhbGNEYXRhID0gdGhpcy5jYWxjRGF0YSwKICAgICAgICByZW5kZXJlciA9IHRoaXMucmVuZGVyZXI7CiAgICAgIHJlbmRlcmVyLmRlbEFsbEdyYXBoKCk7CiAgICAgIHRoaXMud2F2ZXMgPSBbXTsKICAgICAgc2V0VGltZW91dChjYWxjRGF0YSwgMCk7CiAgICB9CiAgfSwKICBtZXRob2RzOiB7CiAgICBpbml0OiBmdW5jdGlvbiBpbml0KCkgewogICAgICB2YXIgaW5pdFJlbmRlciA9IHRoaXMuaW5pdFJlbmRlciwKICAgICAgICBjb25maWcgPSB0aGlzLmNvbmZpZywKICAgICAgICBjYWxjRGF0YSA9IHRoaXMuY2FsY0RhdGE7CiAgICAgIGluaXRSZW5kZXIoKTsKICAgICAgaWYgKCFjb25maWcpIHJldHVybjsKICAgICAgY2FsY0RhdGEoKTsKICAgIH0sCiAgICBpbml0UmVuZGVyOiBmdW5jdGlvbiBpbml0UmVuZGVyKCkgewogICAgICB2YXIgJHJlZnMgPSB0aGlzLiRyZWZzOwogICAgICB0aGlzLnJlbmRlcmVyID0gbmV3IF9jUmVuZGVyLmRlZmF1bHQoJHJlZnNbJ3dhdGVyLXBvbmQtbGV2ZWwnXSk7CiAgICB9LAogICAgY2FsY0RhdGE6IGZ1bmN0aW9uIGNhbGNEYXRhKCkgewogICAgICB2YXIgbWVyZ2VDb25maWcgPSB0aGlzLm1lcmdlQ29uZmlnLAogICAgICAgIGNhbGNTdmdCb3JkZXJHcmFkaWVudCA9IHRoaXMuY2FsY1N2Z0JvcmRlckdyYWRpZW50LAogICAgICAgIGNhbGNEZXRhaWxzID0gdGhpcy5jYWxjRGV0YWlsczsKICAgICAgbWVyZ2VDb25maWcoKTsKICAgICAgY2FsY1N2Z0JvcmRlckdyYWRpZW50KCk7CiAgICAgIGNhbGNEZXRhaWxzKCk7CiAgICAgIHZhciBhZGRXYXZlID0gdGhpcy5hZGRXYXZlLAogICAgICAgIGFuaW1hdGlvbldhdmUgPSB0aGlzLmFuaW1hdGlvbldhdmU7CiAgICAgIGFkZFdhdmUoKTsKICAgICAgYW5pbWF0aW9uV2F2ZSgpOwogICAgfSwKICAgIG1lcmdlQ29uZmlnOiBmdW5jdGlvbiBtZXJnZUNvbmZpZygpIHsKICAgICAgdmFyIGNvbmZpZyA9IHRoaXMuY29uZmlnLAogICAgICAgIGRlZmF1bHRDb25maWcgPSB0aGlzLmRlZmF1bHRDb25maWc7CiAgICAgIHRoaXMubWVyZ2VkQ29uZmlnID0gKDAsIF9pbmRleDIuZGVlcE1lcmdlKSgoMCwgX3V0aWwuZGVlcENsb25lKShkZWZhdWx0Q29uZmlnLCB0cnVlKSwgY29uZmlnKTsKICAgIH0sCiAgICBjYWxjU3ZnQm9yZGVyR3JhZGllbnQ6IGZ1bmN0aW9uIGNhbGNTdmdCb3JkZXJHcmFkaWVudCgpIHsKICAgICAgdmFyIGNvbG9ycyA9IHRoaXMubWVyZ2VkQ29uZmlnLmNvbG9yczsKICAgICAgdmFyIGNvbG9yTnVtID0gY29sb3JzLmxlbmd0aDsKICAgICAgdmFyIGNvbG9yT2Zmc2V0R2FwID0gMTAwIC8gKGNvbG9yTnVtIC0gMSk7CiAgICAgIHRoaXMuc3ZnQm9yZGVyR3JhZGllbnQgPSBjb2xvcnMubWFwKGZ1bmN0aW9uIChjLCBpKSB7CiAgICAgICAgcmV0dXJuIFtjb2xvck9mZnNldEdhcCAqIGksIGNdOwogICAgICB9KTsKICAgIH0sCiAgICBjYWxjRGV0YWlsczogZnVuY3Rpb24gY2FsY0RldGFpbHMoKSB7CiAgICAgIHZhciBfdGhpcyRtZXJnZWRDb25maWcgPSB0aGlzLm1lcmdlZENvbmZpZywKICAgICAgICBkYXRhID0gX3RoaXMkbWVyZ2VkQ29uZmlnLmRhdGEsCiAgICAgICAgZm9ybWF0dGVyID0gX3RoaXMkbWVyZ2VkQ29uZmlnLmZvcm1hdHRlcjsKICAgICAgaWYgKCFkYXRhLmxlbmd0aCkgewogICAgICAgIHRoaXMuZGV0YWlscyA9ICcnOwogICAgICAgIHJldHVybjsKICAgICAgfQogICAgICB2YXIgbWF4VmFsdWUgPSBNYXRoLm1heC5hcHBseShNYXRoLCAoMCwgX3RvQ29uc3VtYWJsZUFycmF5Mi5kZWZhdWx0KShkYXRhKSk7CiAgICAgIHRoaXMuZGV0YWlscyA9IGZvcm1hdHRlci5yZXBsYWNlKCd7dmFsdWV9JywgbWF4VmFsdWUpOwogICAgfSwKICAgIGFkZFdhdmU6IGZ1bmN0aW9uIGFkZFdhdmUoKSB7CiAgICAgIHZhciByZW5kZXJlciA9IHRoaXMucmVuZGVyZXIsCiAgICAgICAgZ2V0V2F2ZVNoYXBlcyA9IHRoaXMuZ2V0V2F2ZVNoYXBlcywKICAgICAgICBnZXRXYXZlU3R5bGUgPSB0aGlzLmdldFdhdmVTdHlsZSwKICAgICAgICBkcmF3ZWQgPSB0aGlzLmRyYXdlZDsKICAgICAgdmFyIHNoYXBlcyA9IGdldFdhdmVTaGFwZXMoKTsKICAgICAgdmFyIHN0eWxlID0gZ2V0V2F2ZVN0eWxlKCk7CiAgICAgIHRoaXMud2F2ZXMgPSBzaGFwZXMubWFwKGZ1bmN0aW9uIChzaGFwZSkgewogICAgICAgIHJldHVybiByZW5kZXJlci5hZGQoewogICAgICAgICAgbmFtZTogJ3Ntb290aGxpbmUnLAogICAgICAgICAgYW5pbWF0aW9uRnJhbWU6IDMwMCwKICAgICAgICAgIHNoYXBlOiBzaGFwZSwKICAgICAgICAgIHN0eWxlOiBzdHlsZSwKICAgICAgICAgIGRyYXdlZDogZHJhd2VkCiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfSwKICAgIGdldFdhdmVTaGFwZXM6IGZ1bmN0aW9uIGdldFdhdmVTaGFwZXMoKSB7CiAgICAgIHZhciBtZXJnZWRDb25maWcgPSB0aGlzLm1lcmdlZENvbmZpZywKICAgICAgICByZW5kZXJlciA9IHRoaXMucmVuZGVyZXIsCiAgICAgICAgbWVyZ2VPZmZzZXQgPSB0aGlzLm1lcmdlT2Zmc2V0OwogICAgICB2YXIgd2F2ZU51bSA9IG1lcmdlZENvbmZpZy53YXZlTnVtLAogICAgICAgIHdhdmVIZWlnaHQgPSBtZXJnZWRDb25maWcud2F2ZUhlaWdodCwKICAgICAgICBkYXRhID0gbWVyZ2VkQ29uZmlnLmRhdGE7CiAgICAgIHZhciBfcmVuZGVyZXIkYXJlYSA9ICgwLCBfc2xpY2VkVG9BcnJheTIuZGVmYXVsdCkocmVuZGVyZXIuYXJlYSwgMiksCiAgICAgICAgdyA9IF9yZW5kZXJlciRhcmVhWzBdLAogICAgICAgIGggPSBfcmVuZGVyZXIkYXJlYVsxXTsKICAgICAgdmFyIHBvaW50c051bSA9IHdhdmVOdW0gKiA0ICsgNDsKICAgICAgdmFyIHBvaW50WEdhcCA9IHcgLyB3YXZlTnVtIC8gMjsKICAgICAgcmV0dXJuIGRhdGEubWFwKGZ1bmN0aW9uICh2KSB7CiAgICAgICAgdmFyIHBvaW50cyA9IG5ldyBBcnJheShwb2ludHNOdW0pLmZpbGwoMCkubWFwKGZ1bmN0aW9uIChmb28sIGopIHsKICAgICAgICAgIHZhciB4ID0gdyAtIHBvaW50WEdhcCAqIGo7CiAgICAgICAgICB2YXIgc3RhcnRZID0gKDEgLSB2IC8gMTAwKSAqIGg7CiAgICAgICAgICB2YXIgeSA9IGogJSAyID09PSAwID8gc3RhcnRZIDogc3RhcnRZIC0gd2F2ZUhlaWdodDsKICAgICAgICAgIHJldHVybiBbeCwgeV07CiAgICAgICAgfSk7CiAgICAgICAgcG9pbnRzID0gcG9pbnRzLm1hcChmdW5jdGlvbiAocCkgewogICAgICAgICAgcmV0dXJuIG1lcmdlT2Zmc2V0KHAsIFtwb2ludFhHYXAgKiAyLCAwXSk7CiAgICAgICAgfSk7CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgIHBvaW50czogcG9pbnRzCiAgICAgICAgfTsKICAgICAgfSk7CiAgICB9LAogICAgbWVyZ2VPZmZzZXQ6IGZ1bmN0aW9uIG1lcmdlT2Zmc2V0KF9yZWYsIF9yZWYyKSB7CiAgICAgIHZhciBfcmVmMyA9ICgwLCBfc2xpY2VkVG9BcnJheTIuZGVmYXVsdCkoX3JlZiwgMiksCiAgICAgICAgeCA9IF9yZWYzWzBdLAogICAgICAgIHkgPSBfcmVmM1sxXTsKICAgICAgdmFyIF9yZWY0ID0gKDAsIF9zbGljZWRUb0FycmF5Mi5kZWZhdWx0KShfcmVmMiwgMiksCiAgICAgICAgb3ggPSBfcmVmNFswXSwKICAgICAgICBveSA9IF9yZWY0WzFdOwogICAgICByZXR1cm4gW3ggKyBveCwgeSArIG95XTsKICAgIH0sCiAgICBnZXRXYXZlU3R5bGU6IGZ1bmN0aW9uIGdldFdhdmVTdHlsZSgpIHsKICAgICAgdmFyIHJlbmRlcmVyID0gdGhpcy5yZW5kZXJlciwKICAgICAgICBtZXJnZWRDb25maWcgPSB0aGlzLm1lcmdlZENvbmZpZzsKICAgICAgdmFyIGggPSByZW5kZXJlci5hcmVhWzFdOwogICAgICByZXR1cm4gewogICAgICAgIGdyYWRpZW50Q29sb3I6IG1lcmdlZENvbmZpZy5jb2xvcnMsCiAgICAgICAgZ3JhZGllbnRUeXBlOiAnbGluZWFyJywKICAgICAgICBncmFkaWVudFBhcmFtczogWzAsIDAsIDAsIGhdLAogICAgICAgIGdyYWRpZW50V2l0aDogJ2ZpbGwnLAogICAgICAgIG9wYWNpdHk6IG1lcmdlZENvbmZpZy53YXZlT3BhY2l0eSwKICAgICAgICB0cmFuc2xhdGU6IFswLCAwXQogICAgICB9OwogICAgfSwKICAgIGRyYXdlZDogZnVuY3Rpb24gZHJhd2VkKF9yZWY1LCBfcmVmNikgewogICAgICB2YXIgcG9pbnRzID0gX3JlZjUuc2hhcGUucG9pbnRzOwogICAgICB2YXIgY3R4ID0gX3JlZjYuY3R4LAogICAgICAgIGFyZWEgPSBfcmVmNi5hcmVhOwogICAgICB2YXIgZmlyc3RQb2ludCA9IHBvaW50c1swXTsKICAgICAgdmFyIGxhc3RQb2ludCA9IHBvaW50cy5zbGljZSgtMSlbMF07CiAgICAgIHZhciBoID0gYXJlYVsxXTsKICAgICAgY3R4LmxpbmVUbyhsYXN0UG9pbnRbMF0sIGgpOwogICAgICBjdHgubGluZVRvKGZpcnN0UG9pbnRbMF0sIGgpOwogICAgICBjdHguY2xvc2VQYXRoKCk7CiAgICAgIGN0eC5maWxsKCk7CiAgICB9LAogICAgYW5pbWF0aW9uV2F2ZTogZnVuY3Rpb24gYW5pbWF0aW9uV2F2ZSgpIHsKICAgICAgdmFyIF9hcmd1bWVudHMgPSBhcmd1bWVudHMsCiAgICAgICAgX3RoaXMgPSB0aGlzOwogICAgICByZXR1cm4gKDAsIF9hc3luY1RvR2VuZXJhdG9yMi5kZWZhdWx0KSggLyojX19QVVJFX18qLygwLCBfcmVnZW5lcmF0b3JSdW50aW1lMi5kZWZhdWx0KSgpLm1hcmsoZnVuY3Rpb24gX2NhbGxlZSgpIHsKICAgICAgICB2YXIgcmVwZWF0LCB3YXZlcywgcmVuZGVyZXIsIGFuaW1hdGlvbiwgdzsKICAgICAgICByZXR1cm4gKDAsIF9yZWdlbmVyYXRvclJ1bnRpbWUyLmRlZmF1bHQpKCkud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgICAgd2hpbGUgKDEpIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIHJlcGVhdCA9IF9hcmd1bWVudHMubGVuZ3RoID4gMCAmJiBfYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBfYXJndW1lbnRzWzBdIDogMTsKICAgICAgICAgICAgICB3YXZlcyA9IF90aGlzLndhdmVzLCByZW5kZXJlciA9IF90aGlzLnJlbmRlcmVyLCBhbmltYXRpb24gPSBfdGhpcy5hbmltYXRpb247CiAgICAgICAgICAgICAgaWYgKCFhbmltYXRpb24pIHsKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA0OwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoInJldHVybiIpOwogICAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgICAgX3RoaXMuYW5pbWF0aW9uID0gdHJ1ZTsKICAgICAgICAgICAgICB3ID0gcmVuZGVyZXIuYXJlYVswXTsKICAgICAgICAgICAgICB3YXZlcy5mb3JFYWNoKGZ1bmN0aW9uIChncmFwaCkgewogICAgICAgICAgICAgICAgZ3JhcGguYXR0cignc3R5bGUnLCB7CiAgICAgICAgICAgICAgICAgIHRyYW5zbGF0ZTogWzAsIDBdCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIGdyYXBoLmFuaW1hdGlvbignc3R5bGUnLCB7CiAgICAgICAgICAgICAgICAgIHRyYW5zbGF0ZTogW3csIDBdCiAgICAgICAgICAgICAgICB9LCB0cnVlKTsKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gOTsKICAgICAgICAgICAgICByZXR1cm4gcmVuZGVyZXIubGF1bmNoQW5pbWF0aW9uKCk7CiAgICAgICAgICAgIGNhc2UgOToKICAgICAgICAgICAgICBfdGhpcy5hbmltYXRpb24gPSBmYWxzZTsKICAgICAgICAgICAgICBpZiAocmVuZGVyZXIuZ3JhcGhzLmxlbmd0aCkgewogICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDEyOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoInJldHVybiIpOwogICAgICAgICAgICBjYXNlIDEyOgogICAgICAgICAgICAgIF90aGlzLmFuaW1hdGlvbldhdmUocmVwZWF0ICsgMSk7CiAgICAgICAgICAgIGNhc2UgMTM6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlKTsKICAgICAgfSkpKCk7CiAgICB9CiAgfSwKICBtb3VudGVkOiBmdW5jdGlvbiBtb3VudGVkKCkgewogICAgdmFyIGluaXQgPSB0aGlzLmluaXQ7CiAgICBpbml0KCk7CiAgfSwKICBiZWZvcmVEZXN0cm95OiBmdW5jdGlvbiBiZWZvcmVEZXN0cm95KCkgewogICAgdmFyIHJlbmRlcmVyID0gdGhpcy5yZW5kZXJlcjsKICAgIHJlbmRlcmVyLmRlbEFsbEdyYXBoKCk7CiAgICB0aGlzLndhdmVzID0gW107CiAgfQp9Ow=="},{"version":3,"names":["_index","require","_index2","_util","_cRender","_interopRequireDefault","name","props","config","Object","default","_default","data","id","uuid","gradientId","concat","defaultConfig","shape","waveNum","waveHeight","waveOpacity","colors","formatter","mergedConfig","renderer","svgBorderGradient","details","waves","animation","computed","radius","watch","calcData","delAllGraph","setTimeout","methods","init","initRender","$refs","CRender","mergeConfig","calcSvgBorderGradient","calcDetails","addWave","animationWave","deepMerge","deepClone","colorNum","length","colorOffsetGap","map","c","i","_this$mergedConfig","maxValue","Math","max","apply","_toConsumableArray2","replace","getWaveShapes","getWaveStyle","drawed","shapes","style","add","animationFrame","mergeOffset","_renderer$area","_slicedToArray2","area","w","h","pointsNum","pointXGap","v","points","Array","fill","foo","j","x","startY","y","p","_ref","_ref2","_ref3","_ref4","ox","oy","gradientColor","gradientType","gradientParams","gradientWith","opacity","translate","_ref5","_ref6","ctx","firstPoint","lastPoint","slice","lineTo","closePath","_arguments","arguments","_this","_asyncToGenerator2","_regeneratorRuntime2","mark","_callee","repeat","wrap","_callee$","_context","prev","next","undefined","abrupt","forEach","graph","attr","launchAnimation","graphs","stop","mounted","beforeDestroy"],"sources":["node_modules/@jiaminghi/data-view/lib/components/waterLevelPond/src/main.vue"],"sourcesContent":["<template>\n  <div class=\"dv-water-pond-level\">\n    <svg v-if=\"renderer\">\n      <defs>\n        <linearGradient :id=\"gradientId\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n          <stop v-for=\"lc in svgBorderGradient\" :key=\"lc[0]\"\n            :offset=\"lc[0]\"\n            :stop-color=\"lc[1]\" />\n        </linearGradient>\n      </defs>\n\n      <text\n        v-if=\"renderer\"\n        :stroke=\"`url(#${gradientId})`\"\n        :fill=\"`url(#${gradientId})`\"\n        :x=\"renderer.area[0] / 2 + 8\"\n        :y=\"renderer.area[1] / 2 + 8\"\n      >\n        {{ details }}\n      </text>\n\n      <ellipse v-if=\"!shape || shape === 'round'\"\n        :cx=\"renderer.area[0] / 2 + 8\"\n        :cy=\"renderer.area[1] / 2 + 8\"\n        :rx=\"renderer.area[0] / 2 + 5\"\n        :ry=\"renderer.area[1] / 2 + 5\"\n        :stroke=\"`url(#${gradientId})`\" />\n\n      <rect v-else\n        x=\"2\" y=\"2\"\n        :rx=\"shape === 'roundRect' ? 10 : 0\"\n        :ry=\"shape === 'roundRect' ? 10 : 0\"\n        :width=\"renderer.area[0] + 12\"\n        :height=\"renderer.area[1] + 12\"\n        :stroke=\"`url(#${gradientId})`\" />\n    </svg>\n\n    <canvas ref=\"water-pond-level\" :style=\"`border-radius: ${radius};`\" />\n  </div>\n</template>\n\n<script>\nimport { uuid } from '../../../util/index'\n\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\n\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\n\nimport CRender from '@jiaminghi/c-render'\n\nexport default {\n  name: 'DvWaterLevelPond',\n  props: {\n    config: Object,\n    default: () => ({})\n  },\n  data () {\n    const id = uuid()\n    return {\n      gradientId: `water-level-pond-${id}`,\n\n      defaultConfig: {\n        /**\n         * @description Data\n         * @type {Array<Number>}\n         * @default data = []\n         * @example data = [60, 40]\n         */\n        data: [],\n        /**\n         * @description Shape of wanter level pond\n         * @type {String}\n         * @default shape = 'rect'\n         * @example shape = 'rect' | 'roundRect' | 'round'\n         */\n        shape: 'rect',\n        /**\n         * @description Water wave number\n         * @type {Number}\n         * @default waveNum = 3\n         */\n        waveNum: 3,\n        /**\n         * @description Water wave height (px)\n         * @type {Number}\n         * @default waveHeight = 40\n         */\n        waveHeight: 40,\n        /**\n         * @description Wave opacity\n         * @type {Number}\n         * @default waveOpacity = 0.4\n         */\n        waveOpacity: 0.4,\n        /**\n         * @description Colors (hex|rgb|rgba|color keywords)\n         * @type {Array<String>}\n         * @default colors = ['#00BAFF', '#3DE7C9']\n         * @example colors = ['#000', 'rgb(0, 0, 0)', 'rgba(0, 0, 0, 1)', 'red']\n         */\n        colors: ['#3DE7C9', '#00BAFF'],\n        /**\n         * @description Formatter\n         * @type {String}\n         * @default formatter = '{value}%'\n         */\n        formatter: '{value}%'\n      },\n\n      mergedConfig: {},\n\n      renderer: null,\n\n      svgBorderGradient: [],\n\n      details: '',\n\n      waves: [],\n\n      animation: false\n    }\n  },\n  computed: {\n    radius () {\n      const { shape } = this.mergedConfig\n\n      if (shape === 'round') return '50%'\n\n      if (shape === 'rect') return '0'\n\n      if (shape === 'roundRect') return '10px'\n\n      return '0'\n    },\n    shape () {\n      const { shape } = this.mergedConfig\n\n      if (!shape) return 'rect'\n\n      return shape\n    }\n  },\n  watch: {\n    config () {\n      const { calcData, renderer } = this\n\n      renderer.delAllGraph()\n\n      this.waves = []\n\n      setTimeout(calcData, 0)\n    }\n  },\n  methods: {\n    init () {\n      const { initRender, config, calcData } = this\n\n      initRender()\n\n      if (!config) return\n\n      calcData()\n    },\n    initRender () {\n      const { $refs } = this\n\n      this.renderer = new CRender($refs['water-pond-level'])\n    },\n    calcData () {\n      const { mergeConfig, calcSvgBorderGradient, calcDetails } = this\n\n      mergeConfig()\n\n      calcSvgBorderGradient()\n\n      calcDetails()\n\n      const { addWave, animationWave } = this\n\n      addWave()\n\n      animationWave()\n    },\n    mergeConfig () {\n      const { config, defaultConfig } = this\n\n      this.mergedConfig = deepMerge(deepClone(defaultConfig, true), config)\n    },\n    calcSvgBorderGradient () {\n      const { colors } = this.mergedConfig\n\n      const colorNum = colors.length\n\n      const colorOffsetGap = 100 / (colorNum - 1)\n\n      this.svgBorderGradient = colors.map((c, i) => [colorOffsetGap * i, c])\n    },\n    calcDetails () {\n      const { data, formatter } = this.mergedConfig\n\n      if (!data.length) {\n        this.details = ''\n\n        return\n      }\n\n      const maxValue = Math.max(...data)\n\n      this.details = formatter.replace('{value}', maxValue)\n    },\n    addWave () {\n      const { renderer, getWaveShapes, getWaveStyle, drawed } = this\n\n      const shapes = getWaveShapes()\n      const style = getWaveStyle()\n\n      this.waves = shapes.map(shape => renderer.add({\n        name: 'smoothline',\n        animationFrame: 300,\n        shape,\n        style,\n        drawed\n      }))\n    },\n    getWaveShapes () {\n      const { mergedConfig, renderer, mergeOffset } = this\n\n      const { waveNum, waveHeight, data } = mergedConfig\n\n      const [w, h] = renderer.area\n\n      const pointsNum = waveNum * 4 + 4\n\n      const pointXGap = w / waveNum / 2\n\n      return data.map(v => {\n        let points = new Array(pointsNum).fill(0).map((foo, j) => {\n          const x = w - pointXGap * j\n\n          const startY = (1 - v / 100) * h\n\n          const y = j % 2 === 0 ? startY : startY - waveHeight\n\n          return [x, y]\n        })\n\n        points = points.map(p => mergeOffset(p, [pointXGap * 2, 0]))\n\n        return { points }\n      })\n    },\n    mergeOffset ([x, y], [ox, oy]) {\n      return [x + ox, y + oy]\n    },\n    getWaveStyle () {\n      const { renderer, mergedConfig } = this\n\n      const h = renderer.area[1]\n\n      return {\n        gradientColor: mergedConfig.colors,\n        gradientType: 'linear',\n        gradientParams: [0, 0, 0, h],\n        gradientWith: 'fill',\n        opacity: mergedConfig.waveOpacity,\n        translate: [0, 0]\n      }\n    },\n    drawed ({ shape: { points } }, { ctx, area }) {\n      const firstPoint = points[0]\n      const lastPoint = points.slice(-1)[0]\n\n      const h = area[1]\n\n      ctx.lineTo(lastPoint[0], h)\n      ctx.lineTo(firstPoint[0], h)\n\n      ctx.closePath()\n\n      ctx.fill()\n    },\n    async animationWave (repeat = 1) {\n      const { waves, renderer, animation } = this\n\n      if (animation) return\n\n      this.animation = true\n\n      const w = renderer.area[0]\n\n      waves.forEach(graph => {\n        graph.attr('style', { translate: [0, 0] })\n\n        graph.animation('style', {\n          translate: [w, 0]\n        }, true)\n      })\n\n      await renderer.launchAnimation()\n\n      this.animation = false\n\n      if (!renderer.graphs.length) return\n\n      this.animationWave(repeat + 1)\n    }\n  },\n  mounted () {\n    const { init } = this\n\n    init()\n  },\n  beforeDestroy () {\n    const { renderer } = this\n\n    renderer.delAllGraph()\n\n    this.waves = []\n  }\n}\n</script>"],"mappings":";;;;;;;;;;;;;;;;;;AA0CA,IAAAA,MAAA,GAAAC,OAAA;AAEA,IAAAC,OAAA,GAAAD,OAAA;AAEA,IAAAE,KAAA,GAAAF,OAAA;AAEA,IAAAG,QAAA,GAAAC,sBAAA,CAAAJ,OAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kCAEA;EACAK,IAAA;EACAC,KAAA;IACAC,MAAA,EAAAC,MAAA;IACAC,OAAA,WAAAC,SAAA;MAAA;IAAA;EACA;EACAC,IAAA,WAAAA,KAAA;IACA,IAAAC,EAAA,OAAAC,WAAA;IACA;MACAC,UAAA,sBAAAC,MAAA,CAAAH,EAAA;MAEAI,aAAA;QACA;AACA;AACA;AACA;AACA;AACA;QACAL,IAAA;QACA;AACA;AACA;AACA;AACA;AACA;QACAM,KAAA;QACA;AACA;AACA;AACA;AACA;QACAC,OAAA;QACA;AACA;AACA;AACA;AACA;QACAC,UAAA;QACA;AACA;AACA;AACA;AACA;QACAC,WAAA;QACA;AACA;AACA;AACA;AACA;AACA;QACAC,MAAA;QACA;AACA;AACA;AACA;AACA;QACAC,SAAA;MACA;MAEAC,YAAA;MAEAC,QAAA;MAEAC,iBAAA;MAEAC,OAAA;MAEAC,KAAA;MAEAC,SAAA;IACA;EACA;EACAC,QAAA;IACAC,MAAA,WAAAA,OAAA;MACA,IAAAb,KAAA,QAAAM,YAAA,CAAAN,KAAA;MAEA,IAAAA,KAAA;MAEA,IAAAA,KAAA;MAEA,IAAAA,KAAA;MAEA;IACA;IACAA,KAAA,WAAAA,MAAA;MACA,IAAAA,KAAA,QAAAM,YAAA,CAAAN,KAAA;MAEA,KAAAA,KAAA;MAEA,OAAAA,KAAA;IACA;EACA;EACAc,KAAA;IACAxB,MAAA,WAAAA,OAAA;MACA,IAAAyB,QAAA,QAAAA,QAAA;QAAAR,QAAA,QAAAA,QAAA;MAEAA,QAAA,CAAAS,WAAA;MAEA,KAAAN,KAAA;MAEAO,UAAA,CAAAF,QAAA;IACA;EACA;EACAG,OAAA;IACAC,IAAA,WAAAA,KAAA;MACA,IAAAC,UAAA,QAAAA,UAAA;QAAA9B,MAAA,QAAAA,MAAA;QAAAyB,QAAA,QAAAA,QAAA;MAEAK,UAAA;MAEA,KAAA9B,MAAA;MAEAyB,QAAA;IACA;IACAK,UAAA,WAAAA,WAAA;MACA,IAAAC,KAAA,QAAAA,KAAA;MAEA,KAAAd,QAAA,OAAAe,gBAAA,CAAAD,KAAA;IACA;IACAN,QAAA,WAAAA,SAAA;MACA,IAAAQ,WAAA,QAAAA,WAAA;QAAAC,qBAAA,QAAAA,qBAAA;QAAAC,WAAA,QAAAA,WAAA;MAEAF,WAAA;MAEAC,qBAAA;MAEAC,WAAA;MAEA,IAAAC,OAAA,QAAAA,OAAA;QAAAC,aAAA,QAAAA,aAAA;MAEAD,OAAA;MAEAC,aAAA;IACA;IACAJ,WAAA,WAAAA,YAAA;MACA,IAAAjC,MAAA,QAAAA,MAAA;QAAAS,aAAA,QAAAA,aAAA;MAEA,KAAAO,YAAA,OAAAsB,iBAAA,MAAAC,eAAA,EAAA9B,aAAA,SAAAT,MAAA;IACA;IACAkC,qBAAA,WAAAA,sBAAA;MACA,IAAApB,MAAA,QAAAE,YAAA,CAAAF,MAAA;MAEA,IAAA0B,QAAA,GAAA1B,MAAA,CAAA2B,MAAA;MAEA,IAAAC,cAAA,UAAAF,QAAA;MAEA,KAAAtB,iBAAA,GAAAJ,MAAA,CAAA6B,GAAA,WAAAC,CAAA,EAAAC,CAAA;QAAA,QAAAH,cAAA,GAAAG,CAAA,EAAAD,CAAA;MAAA;IACA;IACAT,WAAA,WAAAA,YAAA;MACA,IAAAW,kBAAA,QAAA9B,YAAA;QAAAZ,IAAA,GAAA0C,kBAAA,CAAA1C,IAAA;QAAAW,SAAA,GAAA+B,kBAAA,CAAA/B,SAAA;MAEA,KAAAX,IAAA,CAAAqC,MAAA;QACA,KAAAtB,OAAA;QAEA;MACA;MAEA,IAAA4B,QAAA,GAAAC,IAAA,CAAAC,GAAA,CAAAC,KAAA,CAAAF,IAAA,MAAAG,mBAAA,CAAAjD,OAAA,EAAAE,IAAA;MAEA,KAAAe,OAAA,GAAAJ,SAAA,CAAAqC,OAAA,YAAAL,QAAA;IACA;IACAX,OAAA,WAAAA,QAAA;MACA,IAAAnB,QAAA,QAAAA,QAAA;QAAAoC,aAAA,QAAAA,aAAA;QAAAC,YAAA,QAAAA,YAAA;QAAAC,MAAA,QAAAA,MAAA;MAEA,IAAAC,MAAA,GAAAH,aAAA;MACA,IAAAI,KAAA,GAAAH,YAAA;MAEA,KAAAlC,KAAA,GAAAoC,MAAA,CAAAb,GAAA,WAAAjC,KAAA;QAAA,OAAAO,QAAA,CAAAyC,GAAA;UACA5D,IAAA;UACA6D,cAAA;UACAjD,KAAA,EAAAA,KAAA;UACA+C,KAAA,EAAAA,KAAA;UACAF,MAAA,EAAAA;QACA;MAAA;IACA;IACAF,aAAA,WAAAA,cAAA;MACA,IAAArC,YAAA,QAAAA,YAAA;QAAAC,QAAA,QAAAA,QAAA;QAAA2C,WAAA,QAAAA,WAAA;MAEA,IAAAjD,OAAA,GAAAK,YAAA,CAAAL,OAAA;QAAAC,UAAA,GAAAI,YAAA,CAAAJ,UAAA;QAAAR,IAAA,GAAAY,YAAA,CAAAZ,IAAA;MAEA,IAAAyD,cAAA,OAAAC,eAAA,CAAA5D,OAAA,EAAAe,QAAA,CAAA8C,IAAA;QAAAC,CAAA,GAAAH,cAAA;QAAAI,CAAA,GAAAJ,cAAA;MAEA,IAAAK,SAAA,GAAAvD,OAAA;MAEA,IAAAwD,SAAA,GAAAH,CAAA,GAAArD,OAAA;MAEA,OAAAP,IAAA,CAAAuC,GAAA,WAAAyB,CAAA;QACA,IAAAC,MAAA,OAAAC,KAAA,CAAAJ,SAAA,EAAAK,IAAA,IAAA5B,GAAA,WAAA6B,GAAA,EAAAC,CAAA;UACA,IAAAC,CAAA,GAAAV,CAAA,GAAAG,SAAA,GAAAM,CAAA;UAEA,IAAAE,MAAA,QAAAP,CAAA,UAAAH,CAAA;UAEA,IAAAW,CAAA,GAAAH,CAAA,aAAAE,MAAA,GAAAA,MAAA,GAAA/D,UAAA;UAEA,QAAA8D,CAAA,EAAAE,CAAA;QACA;QAEAP,MAAA,GAAAA,MAAA,CAAA1B,GAAA,WAAAkC,CAAA;UAAA,OAAAjB,WAAA,CAAAiB,CAAA,GAAAV,SAAA;QAAA;QAEA;UAAAE,MAAA,EAAAA;QAAA;MACA;IACA;IACAT,WAAA,WAAAA,YAAAkB,IAAA,EAAAC,KAAA;MAAA,IAAAC,KAAA,OAAAlB,eAAA,CAAA5D,OAAA,EAAA4E,IAAA;QAAAJ,CAAA,GAAAM,KAAA;QAAAJ,CAAA,GAAAI,KAAA;MAAA,IAAAC,KAAA,OAAAnB,eAAA,CAAA5D,OAAA,EAAA6E,KAAA;QAAAG,EAAA,GAAAD,KAAA;QAAAE,EAAA,GAAAF,KAAA;MACA,QAAAP,CAAA,GAAAQ,EAAA,EAAAN,CAAA,GAAAO,EAAA;IACA;IACA7B,YAAA,WAAAA,aAAA;MACA,IAAArC,QAAA,QAAAA,QAAA;QAAAD,YAAA,QAAAA,YAAA;MAEA,IAAAiD,CAAA,GAAAhD,QAAA,CAAA8C,IAAA;MAEA;QACAqB,aAAA,EAAApE,YAAA,CAAAF,MAAA;QACAuE,YAAA;QACAC,cAAA,YAAArB,CAAA;QACAsB,YAAA;QACAC,OAAA,EAAAxE,YAAA,CAAAH,WAAA;QACA4E,SAAA;MACA;IACA;IACAlC,MAAA,WAAAA,OAAAmC,KAAA,EAAAC,KAAA;MAAA,IAAAtB,MAAA,GAAAqB,KAAA,CAAAhF,KAAA,CAAA2D,MAAA;MAAA,IAAAuB,GAAA,GAAAD,KAAA,CAAAC,GAAA;QAAA7B,IAAA,GAAA4B,KAAA,CAAA5B,IAAA;MACA,IAAA8B,UAAA,GAAAxB,MAAA;MACA,IAAAyB,SAAA,GAAAzB,MAAA,CAAA0B,KAAA;MAEA,IAAA9B,CAAA,GAAAF,IAAA;MAEA6B,GAAA,CAAAI,MAAA,CAAAF,SAAA,KAAA7B,CAAA;MACA2B,GAAA,CAAAI,MAAA,CAAAH,UAAA,KAAA5B,CAAA;MAEA2B,GAAA,CAAAK,SAAA;MAEAL,GAAA,CAAArB,IAAA;IACA;IACAlC,aAAA,WAAAA,cAAA;MAAA,IAAA6D,UAAA,GAAAC,SAAA;QAAAC,KAAA;MAAA,WAAAC,kBAAA,CAAAnG,OAAA,oBAAAoG,oBAAA,CAAApG,OAAA,IAAAqG,IAAA,UAAAC,QAAA;QAAA,IAAAC,MAAA,EAAArF,KAAA,EAAAH,QAAA,EAAAI,SAAA,EAAA2C,CAAA;QAAA,WAAAsC,oBAAA,CAAApG,OAAA,IAAAwG,IAAA,UAAAC,SAAAC,QAAA;UAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;YAAA;cAAAL,MAAA,GAAAP,UAAA,CAAAzD,MAAA,QAAAyD,UAAA,QAAAa,SAAA,GAAAb,UAAA;cACA9E,KAAA,GAAAgF,KAAA,CAAAhF,KAAA,EAAAH,QAAA,GAAAmF,KAAA,CAAAnF,QAAA,EAAAI,SAAA,GAAA+E,KAAA,CAAA/E,SAAA;cAAA,KAEAA,SAAA;gBAAAuF,QAAA,CAAAE,IAAA;gBAAA;cAAA;cAAA,OAAAF,QAAA,CAAAI,MAAA;YAAA;cAEAZ,KAAA,CAAA/E,SAAA;cAEA2C,CAAA,GAAA/C,QAAA,CAAA8C,IAAA;cAEA3C,KAAA,CAAA6F,OAAA,WAAAC,KAAA;gBACAA,KAAA,CAAAC,IAAA;kBAAA1B,SAAA;gBAAA;gBAEAyB,KAAA,CAAA7F,SAAA;kBACAoE,SAAA,GAAAzB,CAAA;gBACA;cACA;cAAA4C,QAAA,CAAAE,IAAA;cAAA,OAEA7F,QAAA,CAAAmG,eAAA;YAAA;cAEAhB,KAAA,CAAA/E,SAAA;cAAA,IAEAJ,QAAA,CAAAoG,MAAA,CAAA5E,MAAA;gBAAAmE,QAAA,CAAAE,IAAA;gBAAA;cAAA;cAAA,OAAAF,QAAA,CAAAI,MAAA;YAAA;cAEAZ,KAAA,CAAA/D,aAAA,CAAAoE,MAAA;YAAA;YAAA;cAAA,OAAAG,QAAA,CAAAU,IAAA;UAAA;QAAA,GAAAd,OAAA;MAAA;IACA;EACA;EACAe,OAAA,WAAAA,QAAA;IACA,IAAA1F,IAAA,QAAAA,IAAA;IAEAA,IAAA;EACA;EACA2F,aAAA,WAAAA,cAAA;IACA,IAAAvG,QAAA,QAAAA,QAAA;IAEAA,QAAA,CAAAS,WAAA;IAEA,KAAAN,KAAA;EACA;AACA","ignoreList":[]}]}