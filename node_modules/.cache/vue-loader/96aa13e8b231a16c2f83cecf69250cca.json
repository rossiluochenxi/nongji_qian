{"remainingRequest":"D:\\taoserver\\platform\\taoyuan_qian\\ruoyi-ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\taoserver\\platform\\taoyuan_qian\\ruoyi-ui\\src\\views\\index.vue?vue&type=style&index=0&id=a83bd3b0&lang=scss&scoped=true","dependencies":[{"path":"D:\\taoserver\\platform\\taoyuan_qian\\ruoyi-ui\\src\\views\\index.vue","mtime":1713160358970},{"path":"D:\\taoserver\\platform\\taoyuan_qian\\ruoyi-ui\\node_modules\\css-loader\\dist\\cjs.js","mtime":1710867534962},{"path":"D:\\taoserver\\platform\\taoyuan_qian\\ruoyi-ui\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1710867531401},{"path":"D:\\taoserver\\platform\\taoyuan_qian\\ruoyi-ui\\node_modules\\postcss-loader\\src\\index.js","mtime":1710867532662},{"path":"D:\\taoserver\\platform\\taoyuan_qian\\ruoyi-ui\\node_modules\\sass-loader\\dist\\cjs.js","mtime":1710867563138},{"path":"D:\\taoserver\\platform\\taoyuan_qian\\ruoyi-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1710867555791},{"path":"D:\\taoserver\\platform\\taoyuan_qian\\ruoyi-ui\\node_modules\\vue-loader\\lib\\index.js","mtime":1710867531387}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKDQouZGFzaGJvYXJkLWVkaXRvci1jb250YWluZXIgew0KICBwYWRkaW5nOiAzMnB4Ow0KICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMjQwLCAyNDIsIDI0NSk7DQogIHBvc2l0aW9uOiByZWxhdGl2ZTsNCg0KICAuY2hhcnQtd3JhcHBlciB7DQogICAgYmFja2dyb3VuZDogI2ZmZjsNCiAgICBwYWRkaW5nOiAxNnB4IDE2cHggMDsNCiAgICBtYXJnaW4tYm90dG9tOiAzMnB4Ow0KICB9DQp9DQoNCkBtZWRpYSAobWF4LXdpZHRoOiAxMDI0cHgpIHsNCiAgLmNoYXJ0LXdyYXBwZXIgew0KICAgIHBhZGRpbmc6IDhweDsNCiAgfQ0KfQ0K"},{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8LA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/views","sourcesContent":["<template>\r\n  <div className=\"dashboard-editor-container\">\r\n\r\n    <panel-group @handleSetLineChartData=\"handleSetLineChartData\"\r\n                 :count01=\"countList.count01\"\r\n                 :count-t0=\"countList.countT0\"\r\n                 :count-s0=\"countList.countS0\"\r\n                 :count05=\"countList.count05\"\r\n                 :count10=\"countList.count10\"\r\n                 :count15=\"countList.count15\"\r\n                 :count20=\"countList.count20\"\r\n                 :count25=\"countList.count25\"\r\n    />\r\n\r\n    <!--折线图-->\r\n    <el-row style=\"background:#fff; padding:16px 16px 0; margin-bottom:32px;\">\r\n      <line-chart :chart-data=\"lineChartData\" />\r\n    </el-row>\r\n    <!--用不到的几个，因为我只用到了计数框和折线图，其他就不让显示了-->\r\n<!--    <el-row :gutter=\"32\">-->\r\n<!--      &lt;!&ndash;雷达图&ndash;&gt;-->\r\n<!--      <el-col :xs=\"24\" :sm=\"24\" :lg=\"8\">-->\r\n<!--        <div class=\"chart-wrapper\">-->\r\n<!--          <raddar-chart />-->\r\n<!--        </div>-->\r\n<!--      </el-col>-->\r\n<!--      &lt;!&ndash;饼状图&ndash;&gt;-->\r\n<!--      <el-col :xs=\"24\" :sm=\"24\" :lg=\"8\">-->\r\n<!--        <div class=\"chart-wrapper\">-->\r\n<!--          <pie-chart />-->\r\n<!--        </div>-->\r\n<!--      </el-col>-->\r\n<!--      &lt;!&ndash;条形图&ndash;&gt;-->\r\n<!--      <el-col :xs=\"24\" :sm=\"24\" :lg=\"8\">-->\r\n<!--        <div class=\"chart-wrapper\">-->\r\n<!--          <bar-chart />-->\r\n<!--        </div>-->\r\n<!--      </el-col>-->\r\n<!--    </el-row>-->\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport {\r\n  getConfigInfo,\r\n  getIndexLinechartData,\r\n  getIndexLinechartDataByMonth,\r\n  getIndexSelectBoxCount01,\r\n  getIndexSelectBoxCount05,\r\n  getIndexSelectBoxCount10,\r\n  getIndexSelectBoxCount15,\r\n  getIndexSelectBoxCount20,\r\n  getIndexSelectBoxCount25,\r\n  getIndexSelectBoxCountS0,\r\n  getIndexSelectBoxCountT0\r\n} from \"@/index\";\r\n// 面板组\r\nimport PanelGroup from './dashboard/PanelGroup'\r\n// 折线图\r\nimport LineChart from './dashboard/LineChart'\r\n// 雷达图\r\nimport RaddarChart from './dashboard/RaddarChart'\r\n// 饼状图\r\nimport PieChart from './dashboard/PieChart'\r\n// 条形图\r\nimport BarChart from './dashboard/BarChart'\r\n\r\nexport default {\r\n  name: 'Index',\r\n  components: {\r\n    PanelGroup,\r\n    LineChart,\r\n    RaddarChart,\r\n    PieChart,\r\n    BarChart\r\n  },\r\n  data() {\r\n    return {\r\n      /** 当前配置信息，这里是存放获取的租户管理员配置的展示信息 */\r\n      config: {},\r\n      /** 面板组，该用户配置的计数列表，这里你显示什么需要先定义 */\r\n      countList: {\r\n        count01: null,\r\n        countT0: null,\r\n        countS0: null,\r\n        count05: null,\r\n        count10: null,\r\n        count15: null,\r\n        count20: null,\r\n        count25: null,\r\n      },\r\n      // 该用户选择的面板组（数组）\r\n      selected: null,\r\n\r\n      /** 折线图 */\r\n      lineChartData: {\r\n        expectedData: [200, 192, 120, 144, 160, 130, 140],\r\n        actualData: [180, 160, 151, 106, 145, 150, 130],\r\n        dateData: [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"]\r\n      },\r\n\r\n    }\r\n  },\r\n  created() {\r\n    /** 2022-5-31,初始化租户参数 */\r\n    this.configInfo();\r\n  },\r\n  methods: {\r\n    /** 2022-5-27，获取接口参数信息，这里是配置的，我做了管理员选项，让每个租户管理自己选要展示的框 */\r\n    configInfo(){\r\n      getConfigInfo().then(response => {\r\n        this.config = response.data;\r\n        this.selected = this.config.selectBoxCount.split(\",\");\r\n        /** 2022-5-31，获取面板组框：获取该租户设置了展示哪几个计数框 */\r\n        this.check(this.selected);\r\n\r\n        /** 2022-5-31,获取折线图数据 */\r\n        this.getLinechardData();\r\n      });\r\n    },\r\n    /** 判断当前选中了那些，注：这是面板组的，getIndexSelectBoxCount01-xx，这些方法是每个框各自获取自己的框的数据，因为是配置的，就分别获取的 */\r\n    check(selected) {\r\n      for (const s of selected) {\r\n        switch (s) {\r\n          case \"01\":\r\n            getIndexSelectBoxCount01().then(response => {\r\n              this.countList.count01 = parseInt(response.data);\r\n            });\r\n            break;\r\n          case \"S0\":\r\n            getIndexSelectBoxCountS0().then(response => {\r\n              this.countList.countT0 = parseInt(response.data);\r\n            });\r\n            break;\r\n          case \"T0\":\r\n            getIndexSelectBoxCountT0().then(response => {\r\n              this.countList.countS0 = parseInt(response.data);\r\n            });\r\n            break;\r\n          case \"05\":\r\n            getIndexSelectBoxCount05().then(response => {\r\n              this.countList.count05 = parseInt(response.data);\r\n            });\r\n            break;\r\n          case \"10\":\r\n            getIndexSelectBoxCount10().then(response => {\r\n              this.countList.count10 = parseInt(response.data)\r\n            });\r\n            break;\r\n          case \"15\":\r\n            getIndexSelectBoxCount15().then(response => {\r\n              this.countList.count15 = parseInt(response.data);\r\n            });\r\n            break;\r\n          case \"20\":\r\n            getIndexSelectBoxCount20().then(response => {\r\n              this.countList.count20 = parseInt(response.data);\r\n            });\r\n            break;\r\n          case \"25\":\r\n            getIndexSelectBoxCount25().then(response => {\r\n              this.countList.count25 = parseInt(response.data);\r\n            });\r\n            break;\r\n        }\r\n      }\r\n    },\r\n    /** 获取折现图的数据，这里也是管理员可配置，所以用到了判断 */\r\n    getLinechardData() {\r\n      getIndexLinechartDataByMonth(this.config.selectLine).then(response => {\r\n        this.lineChartData = response.data;\r\n        // 当前租户设置中选择展示的折线图（1：第一种，2：第二种）\r\n        if (this.config.selectLine === '1') {\r\n          this.lineChartData.selectName = ['发票数','核销数']\r\n        } else {\r\n          this.lineChartData.selectName = ['发票数','转出数']\r\n        }\r\n      })\r\n    },\r\n\r\n    // 调用变化线型图，给4个数据卡片调用的，卡片调用的时候就加载卡片传过来的数据\r\n    handleSetLineChartData(type) {\r\n      // 根据子集的调用切换对应的数据\r\n      // this.lineChartData = lineChartData[type]\r\n    },\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.dashboard-editor-container {\r\n  padding: 32px;\r\n  background-color: rgb(240, 242, 245);\r\n  position: relative;\r\n\r\n  .chart-wrapper {\r\n    background: #fff;\r\n    padding: 16px 16px 0;\r\n    margin-bottom: 32px;\r\n  }\r\n}\r\n\r\n@media (max-width: 1024px) {\r\n  .chart-wrapper {\r\n    padding: 8px;\r\n  }\r\n}\r\n</style>\r\n\r\n"]}]}