{"remainingRequest":"D:\\taoserver\\platform\\taoyuan_qian\\ruoyi-ui\\node_modules\\babel-loader\\lib\\index.js!D:\\taoserver\\platform\\taoyuan_qian\\ruoyi-ui\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\taoserver\\platform\\taoyuan_qian\\ruoyi-ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\taoserver\\platform\\taoyuan_qian\\ruoyi-ui\\node_modules\\@jiaminghi\\data-view\\lib\\components\\flylineChartEnhanced\\src\\main.vue?vue&type=script&lang=js","dependencies":[{"path":"D:\\taoserver\\platform\\taoyuan_qian\\ruoyi-ui\\node_modules\\@jiaminghi\\data-view\\lib\\components\\flylineChartEnhanced\\src\\main.vue","mtime":1713163063684},{"path":"D:\\taoserver\\platform\\taoyuan_qian\\ruoyi-ui\\babel.config.js","mtime":1710675411407},{"path":"D:\\taoserver\\platform\\taoyuan_qian\\ruoyi-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1710867555791},{"path":"D:\\taoserver\\platform\\taoyuan_qian\\ruoyi-ui\\node_modules\\babel-loader\\lib\\index.js","mtime":1710867556608},{"path":"D:\\taoserver\\platform\\taoyuan_qian\\ruoyi-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1710867555791},{"path":"D:\\taoserver\\platform\\taoyuan_qian\\ruoyi-ui\\node_modules\\vue-loader\\lib\\index.js","mtime":1710867531387}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["_index","require","_util","_index2","_autoResize","_interopRequireDefault","name","mixins","autoResize","props","config","type","Object","default","_default","dev","Boolean","data","id","uuid","ref","unique","Math","random","flylineGradientId","concat","haloGradientId","defaultConfig","points","lines","halo","show","duration","color","radius","text","offset","fontSize","icon","src","width","height","line","orbitColor","bgImgSrc","k","curvature","relative","flylines","flylineLengths","flylinePoints","mergedConfig","watch","calcData","methods","afterAutoResizeMixinInit","onResize","_this","_asyncToGenerator2","_regeneratorRuntime2","mark","_callee","mergeConfig","calcflylinePoints","calcLinePaths","calcLineLengths","wrap","_callee$","_context","prev","next","stop","deepMerge","deepClone","map","item","i","_item$coordinate","_slicedToArray2","coordinate","x","y","time","randomExtend","apply","_toConsumableArray2","iw","ih","_text$offset","ox","oy","key","toString","getPath","source","target","sourcePoint","find","_ref","targetPoint","_ref2","path","v","parseFloat","toFixed","d","_objectSpread2","start","end","getControlPoint","controlPoint","_ref3","_ref4","_ref5","sx","sy","_ref6","ex","ey","getKLinePointByx","mx","my","distance","getPointDistance","targetLength","disDived","dx","dy","_ref7","_ref8","lx","ly","_this2","_callee2","$nextTick","$refs","_callee2$","_context2","_ref9","getTotalLength","consoleClickPos","_ref10","offsetX","offsetY","relativeX","relativeY","console","warn"],"sources":["node_modules/@jiaminghi/data-view/lib/components/flylineChartEnhanced/src/main.vue"],"sourcesContent":["<template>\n  <div\n    class=\"dv-flyline-chart-enhanced\"\n    :style=\"`background-image: url(${mergedConfig ? mergedConfig.bgImgSrc : ''})`\"\n    :ref=\"ref\"\n    @click=\"consoleClickPos\"\n  >\n    <svg v-if=\"flylines.length\" :width=\"width\" :height=\"height\">\n      <defs>\n        <radialGradient\n          :id=\"flylineGradientId\"\n          cx=\"50%\" cy=\"50%\" r=\"50%\"\n        >\n          <stop\n            offset=\"0%\" stop-color=\"#fff\"\n            stop-opacity=\"1\"\n          />\n          <stop\n            offset=\"100%\" stop-color=\"#fff\"\n            stop-opacity=\"0\"\n          />\n        </radialGradient>\n\n        <radialGradient\n          :id=\"haloGradientId\"\n          cx=\"50%\" cy=\"50%\" r=\"50%\"\n        >\n          <stop\n            offset=\"0%\" stop-color=\"#fff\"\n            stop-opacity=\"0\"\n          />\n          <stop\n            offset=\"100%\" stop-color=\"#fff\"\n            stop-opacity=\"1\"\n          />\n        </radialGradient>\n      </defs>\n\n      <!-- points -->\n      <g v-for=\"point in flylinePoints\" :key=\"point.key + Math.random()\">\n        <defs>\n          <circle\n            v-if=\"point.halo.show\"\n            :id=\"`halo${unique}${point.key}`\"\n            :cx=\"point.coordinate[0]\"\n            :cy=\"point.coordinate[1]\"\n          >\n            <animate\n              attributeName=\"r\"\n              :values=\"`1;${point.halo.radius}`\"\n              :dur=\"`${point.halo.time}s`\"\n              repeatCount=\"indefinite\"\n            />\n            <animate\n              attributeName=\"opacity\"\n              values=\"1;0\"\n              :dur=\"`${point.halo.time}s`\"\n              repeatCount=\"indefinite\"\n            />\n          </circle>\n        </defs>\n\n        <!-- halo gradient mask -->\n        <mask :id=\"`mask${unique}${point.key}`\">\n          <use\n            v-if=\"point.halo.show\"\n            :xlink:href=\"`#halo${unique}${point.key}`\"\n            :fill=\"`url(#${haloGradientId})`\"\n          />\n        </mask>\n\n        <!-- point halo -->\n        <use\n          v-if=\"point.halo.show\"\n          :xlink:href=\"`#halo${unique}${point.key}`\"\n          :fill=\"point.halo.color\"\n          :mask=\"`url(#mask${unique}${point.key})`\"\n        />\n\n        <!-- point icon -->\n        <image\n          v-if=\"point.icon.show\"\n          :xlink:href=\"point.icon.src\"\n          :width=\"point.icon.width\"\n          :height=\"point.icon.height\"\n          :x=\"point.icon.x\"\n          :y=\"point.icon.y\"\n        />\n\n        <!-- point text -->\n        <text\n          v-if=\"point.text.show\"\n          :style=\"`fontSize:${point.text.fontSize}px;color:${point.text.color}`\"\n          :fill=\"point.text.color\"\n          :x=\"point.text.x\"\n          :y=\"point.text.y\"\n        >\n          {{ point.name }}\n        </text>\n      </g>\n\n      <!-- flylines -->\n      <g v-for=\"(line, i) in flylines\" :key=\"line.key + Math.random()\">\n        <defs>\n          <path\n            :id=\"line.key\"\n            :ref=\"line.key\"\n            :d=\"line.d\"\n            fill=\"transparent\"\n          />\n        </defs>\n\n        <!-- orbit line -->\n        <use\n          :xlink:href=\"`#${line.key}`\"\n          :stroke-width=\"line.width\"\n          :stroke=\"line.orbitColor\"\n        />\n\n        <!-- fly line gradient mask -->\n        <mask :id=\"`mask${unique}${line.key}`\">\n          <circle cx=\"0\" cy=\"0\" :r=\"line.radius\" :fill=\"`url(#${flylineGradientId})`\">\n            <animateMotion\n              :dur=\"line.time\"\n              :path=\"line.d\"\n              rotate=\"auto\"\n              repeatCount=\"indefinite\"\n            />\n          </circle>\n        </mask>\n\n        <!-- fly line -->\n        <use\n          v-if=\"flylineLengths[i]\"\n          :xlink:href=\"`#${line.key}`\"\n          :stroke-width=\"line.width\"\n          :stroke=\"line.color\"\n          :mask=\"`url(#mask${unique}${line.key})`\"\n        >\n          <animate\n            attributeName=\"stroke-dasharray\"\n            :from=\"`0, ${flylineLengths[i]}`\"\n            :to=\"`${flylineLengths[i]}, 0`\"\n            :dur=\"line.time\"\n            repeatCount=\"indefinite\"\n          />\n        </use>\n      </g>\n    </svg>\n  </div>\n</template>\n\n<script>\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\n\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\n\nimport { randomExtend, getPointDistance, uuid } from '../../../util/index'\n\nimport autoResize from '../../../mixin/autoResize'\n\nexport default {\n  name: 'DvFlylineChartEnhanced',\n  mixins: [autoResize],\n  props: {\n    config: {\n      type: Object,\n      default: () => ({})\n    },\n    dev: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data () {\n    const id = uuid()\n    return {\n      ref: 'dv-flyline-chart-enhanced',\n      unique: Math.random(),\n      flylineGradientId: `flyline-gradient-id-${id}`,\n      haloGradientId: `halo-gradient-id-${id}`,\n      /**\n       * @description Type Declaration\n       * \n       * interface Halo {\n       *    show?: boolean\n       *    duration?: [number, number]\n       *    color?: string\n       *    radius?: number\n       * }\n       * \n       * interface Text {\n       *    show?: boolean\n       *    offset?: [number, number]\n       *    color?: string\n       *    fontSize?: number\n       * }\n       * \n       * interface Icon {\n       *    show?: boolean\n       *    src?: string\n       *    width?: number\n       *    height?: number\n       * }\n       * \n       * interface Point {\n       *    name: string\n       *    coordinate: [number, number]\n       *    halo?: Halo\n       *    text?: Text\n       *    icon?: Icon\n       * }\n       * \n       * interface Line {\n       *    width?: number\n       *    color?: string\n       *    orbitColor?: string\n       *    duration?: [number, number]\n       *    radius?: string\n       * }\n       * \n       * interface Flyline extends Line {\n       *    source: string\n       *    target: string\n       * }\n       * \n       * interface FlylineWithPath extends Flyline {\n       *    d: string\n       *    path: [[number, number], [number, number], [number, number]]\n       *    key: string\n       * }\n       */\n      defaultConfig: {\n        /**\n         * @description Flyline chart points\n         * @type {Point[]}\n         * @default points = []\n         */\n        points: [],\n        /**\n         * @description Lines\n         * @type {Flyline[]}\n         * @default lines = []\n         */\n        lines: [],\n        /**\n         * @description Global halo configuration\n         * @type {Halo}\n         */\n        halo: {\n          /**\n           * @description Whether to show halo\n           * @type {Boolean}\n           * @default show = false\n           */\n          show: false,\n          /**\n           * @description Halo animation duration (1s = 10)\n           * @type {[number, number]}\n           */\n          duration: [20, 30],\n          /**\n           * @description Halo color\n           * @type {String}\n           * @default color = '#fb7293'\n           */\n          color: '#fb7293',\n          /**\n           * @description Halo radius\n           * @type {Number}\n           * @default radius = 120\n           */\n          radius: 120\n        },\n        /**\n         * @description Global text configuration\n         * @type {Text}\n         */\n        text: {\n          /**\n           * @description Whether to show text\n           * @type {Boolean}\n           * @default show = false\n           */\n          show: false,\n          /**\n           * @description Text offset\n           * @type {[number, number]}\n           * @default offset = [0, 15]\n           */\n          offset: [0, 15],\n          /**\n           * @description Text color\n           * @type {String}\n           * @default color = '#ffdb5c'\n           */\n          color: '#ffdb5c',\n          /**\n           * @description Text font size\n           * @type {Number}\n           * @default fontSize = 12\n           */\n          fontSize: 12\n        },\n        /**\n         * @description Global icon configuration\n         * @type {Icon}\n         */\n        icon: {\n          /**\n           * @description Whether to show icon\n           * @type {Boolean}\n           * @default show = false\n           */\n          show: false,\n          /**\n           * @description Icon src\n           * @type {String}\n           * @default src = ''\n           */\n          src: '',\n          /**\n           * @description Icon width\n           * @type {Number}\n           * @default width = 15\n           */\n          width: 15,\n          /**\n           * @description Icon height\n           * @type {Number}\n           * @default width = 15\n           */\n          height: 15\n        },\n        /**\n         * @description Global line configuration\n         * @type {Line}\n         */\n        line: {\n          /**\n           * @description Line width\n           * @type {Number}\n           * @default width = 1\n           */\n          width: 1,\n          /**\n           * @description Flyline color\n           * @type {String}\n           * @default color = '#ffde93'\n           */\n          color: '#ffde93',\n          /**\n           * @description Orbit color\n           * @type {String}\n           * @default orbitColor = 'rgba(103, 224, 227, .2)'\n           */\n          orbitColor: 'rgba(103, 224, 227, .2)',\n          /**\n           * @description Flyline animation duration\n           * @type {[number, number]}\n           * @default duration = [20, 30]\n           */\n          duration: [20, 30],\n          /**\n           * @description Flyline radius\n           * @type {Number}\n           * @default radius = 100\n           */\n          radius: 100\n        },\n        /**\n         * @description Back ground image url\n         * @type {String}\n         * @default bgImgSrc = ''\n         */\n        bgImgSrc: '',\n        /**\n         * @description K value\n         * @type {Number}\n         * @default k = -0.5\n         * @example k = -1 ~ 1\n         */\n        k: -0.5,\n        /**\n         * @description Flyline curvature\n         * @type {Number}\n         * @default curvature = 5\n         */\n        curvature: 5,\n        /**\n         * @description Relative points position\n         * @type {Boolean}\n         * @default relative = true\n         */\n        relative: true\n      },\n      /**\n       * @description Fly line data\n       * @type {FlylineWithPath[]}\n       * @default flylines = []\n       */\n      flylines: [],\n      /**\n       * @description Fly line lengths\n       * @type {Number[]}\n       * @default flylineLengths = []\n       */\n      flylineLengths: [],\n      /**\n       * @description Fly line points\n       * @default flylinePoints = []\n       */\n      flylinePoints: [],\n\n      mergedConfig: null\n    }\n  },\n  watch: {\n    config () {\n      const { calcData } = this\n\n      calcData()\n    }\n  },\n  methods: {\n    afterAutoResizeMixinInit () {\n      const { calcData } = this\n\n      calcData()\n    },\n    onResize () {\n      const { calcData } = this\n\n      calcData()\n    },\n    async calcData () {\n      const { mergeConfig, calcflylinePoints, calcLinePaths } = this\n\n      mergeConfig()\n\n      calcflylinePoints()\n\n      calcLinePaths()\n\n      const { calcLineLengths } = this\n\n      await calcLineLengths()\n    },\n    mergeConfig () {\n      let { config, defaultConfig } = this\n\n      const mergedConfig = deepMerge(deepClone(defaultConfig, true), config || {})\n\n      const { points, lines, halo, text, icon, line } = mergedConfig\n\n      mergedConfig.points = points.map(item => {\n        item.halo = deepMerge(deepClone(halo, true), item.halo || {})\n        item.text = deepMerge(deepClone(text, true), item.text || {})\n        item.icon = deepMerge(deepClone(icon, true), item.icon || {})\n\n        return item\n      })\n\n      mergedConfig.lines = lines.map(item => {\n        return deepMerge(deepClone(line, true), item)\n      })\n\n      this.mergedConfig = mergedConfig\n    },\n    calcflylinePoints () {\n      const { mergedConfig, width, height } = this\n\n      const { relative, points } = mergedConfig\n\n      this.flylinePoints = points.map((item, i) => {\n        const { coordinate: [x, y], halo, icon, text } = item\n\n        if (relative) item.coordinate = [x * width, y * height]\n\n        item.halo.time = randomExtend(...halo.duration) / 10\n\n        const { width: iw, height: ih } = icon\n        item.icon.x = item.coordinate[0] - iw / 2\n        item.icon.y = item.coordinate[1] - ih / 2\n\n        const [ox, oy] = text.offset\n        item.text.x = item.coordinate[0] + ox\n        item.text.y = item.coordinate[1] + oy\n\n        item.key = `${item.coordinate.toString()}${i}`\n\n        return item\n      })\n    },\n    calcLinePaths () {\n      const { getPath, mergedConfig } = this\n\n      const { points, lines } = mergedConfig\n\n      this.flylines = lines.map(item => {\n        const { source, target, duration } = item\n\n        const sourcePoint = points.find(({ name }) => name === source).coordinate\n        const targetPoint = points.find(({ name }) => name === target).coordinate\n\n        const path = getPath(sourcePoint, targetPoint).map(item => item.map(v => parseFloat(v.toFixed(10))))\n        const d = `M${path[0].toString()} Q${path[1].toString()} ${path[2].toString()}`\n        const key = `path${path.toString()}`\n        const time = randomExtend(...duration) / 10\n\n        return { ...item, path, key, d, time }\n      })\n    },\n    getPath (start, end) {\n      const { getControlPoint } = this\n\n      const controlPoint = getControlPoint(start, end)\n\n      return [start, controlPoint, end]\n    },\n    getControlPoint ([sx, sy], [ex, ey]) {\n      const { getKLinePointByx, mergedConfig } = this\n\n      const { curvature, k } = mergedConfig\n\n      const [mx, my] = [(sx + ex) / 2, (sy + ey) / 2]\n\n      const distance = getPointDistance([sx, sy], [ex, ey])\n\n      const targetLength = distance / curvature\n      const disDived = targetLength / 2\n\n      let [dx, dy] = [mx, my]\n\n      do {\n        dx += disDived\n        dy = getKLinePointByx(k, [mx, my], dx)[1]\n      } while (getPointDistance([mx, my], [dx, dy]) < targetLength)\n\n      return [dx, dy]\n    },\n    getKLinePointByx (k, [lx, ly], x) {\n      const y = ly - k * lx + k * x\n\n      return [x, y]\n    },\n    async calcLineLengths () {\n      const { $nextTick, flylines, $refs } = this\n\n      await $nextTick()\n\n      this.flylineLengths = flylines.map(({ key }) => $refs[key][0].getTotalLength())\n    },\n    consoleClickPos ({ offsetX, offsetY }) {\n      const { width, height, dev } = this\n\n      if (!dev) return\n\n      const relativeX = (offsetX / width).toFixed(2)\n      const relativeY = (offsetY / height).toFixed(2)\n\n      console.warn(`dv-flyline-chart-enhanced DEV: \\n Click Position is [${offsetX}, ${offsetY}] \\n Relative Position is [${relativeX}, ${relativeY}]`)\n    }\n  }\n}\n</script>"],"mappings":";;;;;;;;;;;;;;;;;;;AAyJA,IAAAA,MAAA,GAAAC,OAAA;AAEA,IAAAC,KAAA,GAAAD,OAAA;AAEA,IAAAE,OAAA,GAAAF,OAAA;AAEA,IAAAG,WAAA,GAAAC,sBAAA,CAAAJ,OAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kCAEA;EACAK,IAAA;EACAC,MAAA,GAAAC,mBAAA;EACAC,KAAA;IACAC,MAAA;MACAC,IAAA,EAAAC,MAAA;MACAC,OAAA,WAAAC,SAAA;QAAA;MAAA;IACA;IACAC,GAAA;MACAJ,IAAA,EAAAK,OAAA;MACAH,OAAA;IACA;EACA;EACAI,IAAA,WAAAA,KAAA;IACA,IAAAC,EAAA,OAAAC,YAAA;IACA;MACAC,GAAA;MACAC,MAAA,EAAAC,IAAA,CAAAC,MAAA;MACAC,iBAAA,yBAAAC,MAAA,CAAAP,EAAA;MACAQ,cAAA,sBAAAD,MAAA,CAAAP,EAAA;MACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACAS,aAAA;QACA;AACA;AACA;AACA;AACA;QACAC,MAAA;QACA;AACA;AACA;AACA;AACA;QACAC,KAAA;QACA;AACA;AACA;AACA;QACAC,IAAA;UACA;AACA;AACA;AACA;AACA;UACAC,IAAA;UACA;AACA;AACA;AACA;UACAC,QAAA;UACA;AACA;AACA;AACA;AACA;UACAC,KAAA;UACA;AACA;AACA;AACA;AACA;UACAC,MAAA;QACA;QACA;AACA;AACA;AACA;QACAC,IAAA;UACA;AACA;AACA;AACA;AACA;UACAJ,IAAA;UACA;AACA;AACA;AACA;AACA;UACAK,MAAA;UACA;AACA;AACA;AACA;AACA;UACAH,KAAA;UACA;AACA;AACA;AACA;AACA;UACAI,QAAA;QACA;QACA;AACA;AACA;AACA;QACAC,IAAA;UACA;AACA;AACA;AACA;AACA;UACAP,IAAA;UACA;AACA;AACA;AACA;AACA;UACAQ,GAAA;UACA;AACA;AACA;AACA;AACA;UACAC,KAAA;UACA;AACA;AACA;AACA;AACA;UACAC,MAAA;QACA;QACA;AACA;AACA;AACA;QACAC,IAAA;UACA;AACA;AACA;AACA;AACA;UACAF,KAAA;UACA;AACA;AACA;AACA;AACA;UACAP,KAAA;UACA;AACA;AACA;AACA;AACA;UACAU,UAAA;UACA;AACA;AACA;AACA;AACA;UACAX,QAAA;UACA;AACA;AACA;AACA;AACA;UACAE,MAAA;QACA;QACA;AACA;AACA;AACA;AACA;QACAU,QAAA;QACA;AACA;AACA;AACA;AACA;AACA;QACAC,CAAA;QACA;AACA;AACA;AACA;AACA;QACAC,SAAA;QACA;AACA;AACA;AACA;AACA;QACAC,QAAA;MACA;MACA;AACA;AACA;AACA;AACA;MACAC,QAAA;MACA;AACA;AACA;AACA;AACA;MACAC,cAAA;MACA;AACA;AACA;AACA;MACAC,aAAA;MAEAC,YAAA;IACA;EACA;EACAC,KAAA;IACA1C,MAAA,WAAAA,OAAA;MACA,IAAA2C,QAAA,QAAAA,QAAA;MAEAA,QAAA;IACA;EACA;EACAC,OAAA;IACAC,wBAAA,WAAAA,yBAAA;MACA,IAAAF,QAAA,QAAAA,QAAA;MAEAA,QAAA;IACA;IACAG,QAAA,WAAAA,SAAA;MACA,IAAAH,QAAA,QAAAA,QAAA;MAEAA,QAAA;IACA;IACAA,QAAA,WAAAA,SAAA;MAAA,IAAAI,KAAA;MAAA,WAAAC,kBAAA,CAAA7C,OAAA,oBAAA8C,oBAAA,CAAA9C,OAAA,IAAA+C,IAAA,UAAAC,QAAA;QAAA,IAAAC,WAAA,EAAAC,iBAAA,EAAAC,aAAA,EAAAC,eAAA;QAAA,WA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","ignoreList":[]}]}